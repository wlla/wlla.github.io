I"‚<p>I‚Äôm using form to describe an interface that sends data to another place.</p>
<h2 id="orientation">Orientation</h2>
<p>There is some basic, high-level information that people should be able to tell about your form.</p>

<ul>
  <li>What is this form?</li>
  <li>What info will I need to complete this form?</li>
  <li>What happens when I hit ‚Äúsubmit‚Äù? What do I need to do next or what can I expect to happen?</li>
  <li>Am I able to use this form? If there are eligibility requirements, what are they? If this isn‚Äôt the form for me, where can I find the right one?</li>
  <li>When I finish this form, will I have a record of the transaction?</li>
</ul>

<h3 id="required-fields">Required Fields</h3>
<p>Make sure to mark the required fields. Do this in the text label, with the word ‚ÄúRequired‚Äù or a ‚Äú*‚Äù. Include this in the mark-up as well.</p>

<p>In HTML, there are two ways to do this: <code>required</code> attribute or the <code>aria-required="true"</code> attribute. With the HTML attribute, right now, some screenreaders announce that information as soon as you enter an input, which can be irritating. Hopefully will be updated.</p>

<h3 id="required-formats-and-instructional-text">Required Formats and Instructional Text</h3>
<h3 id="placeholder-text">Placeholder Text</h3>
<p>Placeholder text: Placeholder text is confusing. Avoid it. Browsers will often render in too low color contrast ratio and isn‚Äôt reliably picked up with screenreaders. Cognitively, it can be confusing and make it seem like the form is pre-filled. Also, placeholder text isn‚Äôt persistent, so it isn‚Äôt that useful of a reference.
Placeholder text is never serves as a label, instruction, or error message. It can only ever be supplemental to those required fields. Again, best to just avoid.</p>

<h3 id="progress--time-required">Progress &amp; Time Required</h3>
<p>Progress: You may have a long, complex, or branching form that you decide to break into multiple pages. If you do, give people a sense of how long it will take to complete the form, how long the form is, and what information they will need up-front. You should also let them know if there are time limits or if they will be able to save their progress and return. (Think about an application for a job or school.)
Give people a progress bar so they know how far they have progressed.</p>

<h3 id="validation">Validation</h3>
<p>Keep in mind the difference between validation and required fields. An email may be optional in a form, but it still needs to be entered as a valid email address. Part of helping users avoid errors is providing validation when you can.</p>
<h2 id="labels">Labels</h2>
<p>Persistent label. You want people to use your form, right? Give it a label!! This label must be programmatically associated with the form control!
Fieldset: a fieldset / legend combo groups sections of forms. They are a requirement for radio buttons. They can help organize the form. Consider a form that has an address and mailing address section each with inputs for  address, city, state, and zip. Using legend and fieldset means those sections are labelled meaningfully.
Instructional text and inline error messages: don‚Äôt overwrite, but can use the same section.
Dynamic forms: sometimes, you‚Äôll have a single page of a form where sections appear and disapear based on what you‚Äôve entered. (maybe the filters in ravelry?)</p>
<h2 id="error-messages">Error Messages</h2>
<p>Forms are looking for specific types of input. When a user puts is missing information or uses the wrong format, we can help them!
WCAG has a whole section on error messages to ‚Äúhelp users avoid and correct mistakes‚Äù, <a href="https://www.w3.org/WAI/WCAG21/quickref/?showtechniques=147#input-assistance">Guideline 3.3 - Input Assistance</a>. The guideline has six success criteria.
Server-side error messages versus client-side error messages and validation
In-line error messages versus aggregated error messages. Client side validation means the user gets the info faster. It also means their computer is doing some extra work and you‚Äôre probably building some js.
When you build a form, first make sure you‚Äôre doing server side validation. That‚Äôs how you‚Äôll serve no-JS users. Then build client-side validation as an enhancement.
You want the error messages to be on the same page so people can reference them. I‚Äôve seen sites where, after I hit ‚ÄúSubmit‚Äù, the error message showed up as a modal. That‚Äôs not great because then I would have to remember which field needs correcting when I go back to the form.
Have two types of error messages: aggregated and in-line. If you submit a form with errors, provide an error message that 1. explains what it is aka i am an aggregated error message, recieves focus, lists and links - lists all the errors on the page and links to them. In-line error messages and states are associated with individual fields. There could be visual treatment, like using the color red and there should also be text that 1. explains that there is an error; 2. suggests how to fix it. 3. includes any existing instructional text.
If you are validating client-side make sure that validation happens onBlur. OnBlur means that the focus moves out of the field. If you had this triggering when you enter, it would be obnoxious. Don‚Äôt be obnoxious. inline can happen onblur</p>
<h3 id="instructional-text">Instructional text</h3>
<p>When is it needed and where? When something specific is required that isn‚Äôt clear in the label or that users could use support in. When you label an input for a zipcode, you expect a certain format.
You can connect your instructional text with your label programmatically with the aria-labelledby attribute.
Any error message should include rather than overwrite instructional text.</p>
<h3 id="organizing-your-form-wiht-fieldsets">Organizing Your Form wiht Fieldsets</h3>
<p>Example of work address and shipping address</p>
<h2 id="time-limits">Time Limits</h2>
<p>Avoid imposing time limits unless it is essential to the activity or is for security reasons. Be thoughtful about when to use a time-limit. When a time-limit is short, it can cause cognitive strain. Give a countdown clock to a form, and you‚Äôll get higher error rates. While a clock is dynamic content, never wrap it in an aria-live; it would be enourmously distracting and disruptive.
Make sure your time-outs follow <a href="https://www.w3.org/WAI/WCAG21/quickref/#enough-time">WCAG Guideline 2.2 - Enough Time</a>. At a minimum, <a href="https://www.w3.org/WAI/WCAG21/quickref/#timing-adjustable">2.2.1 Timing Adjustable</a>, a level A success critiera with straightforward rules on time limit duration and adjustability.</p>
<h2 id="captcha">CAPTCHA</h2>
<p>Avoid CAPTCHA (Completely automated public Turing test). CAPTCHA manifest as little tasks to perform, like identifying features in images or sound, or clicking a checkbox. The idea behind it is to block malicious software like bots from spamming or otherwise being bad actors. The problem is that the CAPTCHA aren‚Äôt so accessible in format and they will problematically lump good, assistive technology like screenreaders into the ‚Äúbad software‚Äù bucket.</p>
<h2 id="screenreaders--forms">Screenreaders &amp; Forms</h2>
<p>Screenreaders have a form mode they enter. Screenreaders use a number of keyboard shortcuts; For instance, with Jaws, ‚ÄúB‚Äù will navigate a user to all the buttons on a page. These shortcuts aren‚Äôt useful if you‚Äôre trying to type ‚ÄúBrown Bear‚Äù info a form asking your favorite animal. Forms mode means that the keystrokes will write the actual glyphs rather than trigger a shortcut.</p>

<p>Screenreader users don‚Äôt necessarily use the tab key for navigation. (Though that is a common perception.) The tab key is useful in forms to jump quickly through fields, provided they are accessibly labelled!</p>
:ET